# Generated by Django 5.1.3 on 2024-11-24 14:37

import base.base_upload_handlers
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import user.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'A user with that email already exists'}, max_length=254, unique=True, verbose_name='Personal Email')),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('work_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Work Email')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to=base.base_upload_handlers.handle_user_profile_picture, validators=[base.base_upload_handlers.handle_image_upload_limit], verbose_name='Profile Picture')),
                ('phone_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Phone Number')),
                ('address', models.TextField(blank=True, max_length=200, null=True, verbose_name='Address')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=50)),
                ('role', models.CharField(choices=[('1', 'Hospital Admin'), ('2', 'Doctor'), ('3', 'Patient')], max_length=500)),
                ('dob', models.DateField(help_text='Date of Birth', verbose_name='Date of Birth')),
                ('notification_setting', models.BooleanField(default=True)),
                ('unread_notification_count', models.PositiveIntegerField(default=0)),
                ('is_mobile_push_notification_enable', models.BooleanField(blank=True, default=True, null=True, verbose_name='Is Mobile Push Notification Enable')),
                ('is_web_push_notification_enable', models.BooleanField(blank=True, default=True, null=True, verbose_name='Is Web Push Notification Enable')),
                ('is_email_notification_enable', models.BooleanField(blank=True, default=True, null=True, verbose_name='Is Email Notification Enable')),
                ('login_attempts_failed_count', models.PositiveIntegerField(default=0, verbose_name='Login Attempt Failed Count')),
                ('last_login_failed_at', models.DateTimeField(blank=True, null=True, verbose_name='Last Login Failure Datetime')),
                ('auto_unblock_at', models.DateTimeField(blank=True, help_text='User can retry to login after this time', null=True, verbose_name='User will be able to login after this time')),
                ('is_blocked', models.BooleanField(default=False, help_text='On multiple retry exceeded ,then user will be blocked for x hour .', verbose_name='Is Blocked')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('-date_joined',),
            },
            managers=[
                ('objects', user.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DeviceToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('device_type', models.CharField(choices=[('ANDROID', 'android'), ('IOS', 'ios'), ('WEB', 'web')], max_length=10, verbose_name='Device Type')),
                ('token', models.TextField(unique=True, verbose_name='Token')),
                ('session_id', models.CharField(blank=True, help_text='It helps to uniquely identify device', max_length=100, null=True, verbose_name='Session Id')),
                ('jwt_refresh_token_expiry_timestamp', models.FloatField(blank=True, null=True, verbose_name='JWT Refresh Token Expiry Timestamp')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Device Token',
                'verbose_name_plural': 'Device Tokens',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('token', models.CharField(blank=True, max_length=250, null=True)),
                ('token_expiry_timestamp', models.IntegerField(blank=True, null=True)),
                ('is_token_used', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Password Reset Tokens',
                'verbose_name_plural': 'Password Reset Token',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='TokenBlackList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('token', models.TextField(blank=True, max_length=1200, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Token Blacklist',
                'verbose_name_plural': 'Token Blacklist',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='UserLoginSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('session_id', models.CharField(max_length=100, verbose_name='Session Id')),
                ('session_expired_at', models.DateTimeField(verbose_name='Session Expiry Datetime')),
                ('remote_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Remote Address')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_login_sessions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Login Sessions',
                'verbose_name_plural': 'User Login Session',
                'ordering': ('-created_at',),
            },
        ),
        migrations.AddConstraint(
            model_name='customuser',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', False)), fields=('email',), name='email'),
        ),
    ]
